
AUDIO_BEAM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000040  00800060  00800060  0000094c  2**0
                  ALLOC
  2 .stab         00002430  00000000  00000000  0000094c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000008aa  00000000  00000000  00002d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00003626  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000073  00000000  00000000  00003646  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000493  00000000  00000000  000036b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001f4  00000000  00000000  00003b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041b  00000000  00000000  00003d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  0000415c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000240  00000000  00000000  000041cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000226  00000000  00000000  0000440c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000002c  00000000  00000000  00004632  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  0000465e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 3a       	cpi	r26, 0xA0	; 160
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6d 01 	call	0x2da	; 0x2da <main>
  74:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z12CalcPhaseValmm>:
inline void SetAllCS_High();
void CalcPhaseVal(uint32_t freq, uint32_t dist);

//funkcja oblicza opóźnienia fazowe dla każdego generatora
void CalcPhaseVal(uint32_t freq, uint32_t dist)
{
  7c:	2f 92       	push	r2
  7e:	3f 92       	push	r3
  80:	4f 92       	push	r4
  82:	5f 92       	push	r5
  84:	6f 92       	push	r6
  86:	7f 92       	push	r7
  88:	8f 92       	push	r8
  8a:	9f 92       	push	r9
  8c:	af 92       	push	r10
  8e:	bf 92       	push	r11
  90:	cf 92       	push	r12
  92:	df 92       	push	r13
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	df 93       	push	r29
  9e:	cf 93       	push	r28
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	c2 58       	subi	r28, 0x82	; 130
  a6:	d0 40       	sbci	r29, 0x00	; 0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	cd bf       	out	0x3d, r28	; 61
  b2:	1b 01       	movw	r2, r22
  b4:	2c 01       	movw	r4, r24
  b6:	ca 01       	movw	r24, r20
  b8:	b9 01       	movw	r22, r18
inline void SetAllCS_Low();
inline void SetAllCS_High();
void CalcPhaseVal(uint32_t freq, uint32_t dist);

//funkcja oblicza opóźnienia fazowe dla każdego generatora
void CalcPhaseVal(uint32_t freq, uint32_t dist)
  ba:	8e 01       	movw	r16, r28
  bc:	0f 5f       	subi	r16, 0xFF	; 255
  be:	1f 4f       	sbci	r17, 0xFF	; 255
{
  c0:	f8 01       	movw	r30, r16
	uint32_t spacing = 0.0725;//m    
    uint32_t speedSound = 343.0;// m/s
    uint32_t distxTab[TABSIZE];
    uint32_t maxdistx = spacing*7;
    for (int i = 0; i<TABSIZE; i++){
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
        if (i<7)distxTab[i]=(maxdistx-i*spacing)+spacing/2;
  c6:	27 30       	cpi	r18, 0x07	; 7
  c8:	31 05       	cpc	r19, r1
  ca:	24 f4       	brge	.+8      	; 0xd4 <_Z12CalcPhaseValmm+0x58>
  cc:	10 82       	st	Z, r1
  ce:	11 82       	std	Z+1, r1	; 0x01
  d0:	12 82       	std	Z+2, r1	; 0x02
  d2:	13 82       	std	Z+3, r1	; 0x03
        if (i == 7)distxTab[i]=spacing/2;
  d4:	27 30       	cpi	r18, 0x07	; 7
  d6:	31 05       	cpc	r19, r1
  d8:	29 f4       	brne	.+10     	; 0xe4 <_Z12CalcPhaseValmm+0x68>
  da:	1d 8e       	std	Y+29, r1	; 0x1d
  dc:	1e 8e       	std	Y+30, r1	; 0x1e
  de:	1f 8e       	std	Y+31, r1	; 0x1f
  e0:	18 a2       	std	Y+32, r1	; 0x20
  e2:	12 c0       	rjmp	.+36     	; 0x108 <_Z12CalcPhaseValmm+0x8c>
        if (i == 8)distxTab[i]=spacing/2;
  e4:	28 30       	cpi	r18, 0x08	; 8
  e6:	31 05       	cpc	r19, r1
  e8:	41 f4       	brne	.+16     	; 0xfa <_Z12CalcPhaseValmm+0x7e>
  ea:	19 a2       	std	Y+33, r1	; 0x21
  ec:	1a a2       	std	Y+34, r1	; 0x22
  ee:	1b a2       	std	Y+35, r1	; 0x23
  f0:	1c a2       	std	Y+36, r1	; 0x24
{
	uint32_t spacing = 0.0725;//m    
    uint32_t speedSound = 343.0;// m/s
    uint32_t distxTab[TABSIZE];
    uint32_t maxdistx = spacing*7;
    for (int i = 0; i<TABSIZE; i++){
  f2:	2f 5f       	subi	r18, 0xFF	; 255
  f4:	3f 4f       	sbci	r19, 0xFF	; 255
  f6:	34 96       	adiw	r30, 0x04	; 4
  f8:	e6 cf       	rjmp	.-52     	; 0xc6 <_Z12CalcPhaseValmm+0x4a>
        if (i<7)distxTab[i]=(maxdistx-i*spacing)+spacing/2;
        if (i == 7)distxTab[i]=spacing/2;
        if (i == 8)distxTab[i]=spacing/2;
        if (i>8) distxTab[i]=spacing/2 + (i-8)*spacing;
  fa:	29 30       	cpi	r18, 0x09	; 9
  fc:	31 05       	cpc	r19, r1
  fe:	24 f0       	brlt	.+8      	; 0x108 <_Z12CalcPhaseValmm+0x8c>
 100:	10 82       	st	Z, r1
 102:	11 82       	std	Z+1, r1	; 0x01
 104:	12 82       	std	Z+2, r1	; 0x02
 106:	13 82       	std	Z+3, r1	; 0x03
{
	uint32_t spacing = 0.0725;//m    
    uint32_t speedSound = 343.0;// m/s
    uint32_t distxTab[TABSIZE];
    uint32_t maxdistx = spacing*7;
    for (int i = 0; i<TABSIZE; i++){
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	34 96       	adiw	r30, 0x04	; 4
 10e:	20 31       	cpi	r18, 0x10	; 16
 110:	31 05       	cpc	r19, r1
 112:	c9 f6       	brne	.-78     	; 0xc6 <_Z12CalcPhaseValmm+0x4a>
        if (i == 8)distxTab[i]=spacing/2;
        if (i>8) distxTab[i]=spacing/2 + (i-8)*spacing;
    }
    uint32_t distRealTab[TABSIZE];
    for (int i = 0; i<TABSIZE; i++){
        distRealTab[i]=sqrt(pow(distxTab[i],2)+pow(dist,2));
 114:	0e 94 9c 02 	call	0x538	; 0x538 <__floatunsisf>
 118:	9b 01       	movw	r18, r22
 11a:	ac 01       	movw	r20, r24
 11c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__mulsf3>
 120:	96 2e       	mov	r9, r22
 122:	67 2e       	mov	r6, r23
 124:	88 2e       	mov	r8, r24
 126:	79 2e       	mov	r7, r25
 128:	0f 2e       	mov	r0, r31
 12a:	f1 e4       	ldi	r31, 0x41	; 65
 12c:	cf 2e       	mov	r12, r31
 12e:	dd 24       	eor	r13, r13
 130:	f0 2d       	mov	r31, r0
 132:	cc 0e       	add	r12, r28
 134:	dd 1e       	adc	r13, r29
inline void SetAllCS_Low();
inline void SetAllCS_High();
void CalcPhaseVal(uint32_t freq, uint32_t dist);

//funkcja oblicza opóźnienia fazowe dla każdego generatora
void CalcPhaseVal(uint32_t freq, uint32_t dist)
 136:	56 01       	movw	r10, r12
 138:	76 01       	movw	r14, r12
        if (i == 8)distxTab[i]=spacing/2;
        if (i>8) distxTab[i]=spacing/2 + (i-8)*spacing;
    }
    uint32_t distRealTab[TABSIZE];
    for (int i = 0; i<TABSIZE; i++){
        distRealTab[i]=sqrt(pow(distxTab[i],2)+pow(dist,2));
 13a:	f8 01       	movw	r30, r16
 13c:	61 91       	ld	r22, Z+
 13e:	71 91       	ld	r23, Z+
 140:	81 91       	ld	r24, Z+
 142:	91 91       	ld	r25, Z+
 144:	8f 01       	movw	r16, r30
 146:	0e 94 9c 02 	call	0x538	; 0x538 <__floatunsisf>
 14a:	9b 01       	movw	r18, r22
 14c:	ac 01       	movw	r20, r24
 14e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__mulsf3>
 152:	29 2d       	mov	r18, r9
 154:	36 2d       	mov	r19, r6
 156:	48 2d       	mov	r20, r8
 158:	57 2d       	mov	r21, r7
 15a:	0e 94 0c 02 	call	0x418	; 0x418 <__addsf3>
 15e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <sqrt>
 162:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fixunssfsi>
 166:	f7 01       	movw	r30, r14
 168:	61 93       	st	Z+, r22
 16a:	71 93       	st	Z+, r23
 16c:	81 93       	st	Z+, r24
 16e:	91 93       	st	Z+, r25
 170:	7f 01       	movw	r14, r30
        if (i == 7)distxTab[i]=spacing/2;
        if (i == 8)distxTab[i]=spacing/2;
        if (i>8) distxTab[i]=spacing/2 + (i-8)*spacing;
    }
    uint32_t distRealTab[TABSIZE];
    for (int i = 0; i<TABSIZE; i++){
 172:	0a 15       	cp	r16, r10
 174:	1b 05       	cpc	r17, r11
 176:	09 f7       	brne	.-62     	; 0x13a <_Z12CalcPhaseValmm+0xbe>
        distRealTab[i]=sqrt(pow(distxTab[i],2)+pow(dist,2));
    }
    uint32_t delayTab[TABSIZE];
    uint32_t delayzero=distRealTab[7]*speedSound;
 178:	fe 01       	movw	r30, r28
 17a:	e3 5a       	subi	r30, 0xA3	; 163
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	60 81       	ld	r22, Z
 180:	71 81       	ldd	r23, Z+1	; 0x01
 182:	82 81       	ldd	r24, Z+2	; 0x02
 184:	93 81       	ldd	r25, Z+3	; 0x03
 186:	27 e5       	ldi	r18, 0x57	; 87
 188:	31 e0       	ldi	r19, 0x01	; 1
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	0e 94 29 04 	call	0x852	; 0x852 <__mulsi3>
 192:	3b 01       	movw	r6, r22
 194:	4c 01       	movw	r8, r24
    for (int i = 0; i<TABSIZE; i++){
        delayTab[i]=(distRealTab[i]*speedSound)-delayzero;
        phaseArray[i] = (1 - ((delayTab[i]/(1/freq))-floor((delayTab[i]/(1/freq)))))*2*3.14159265358979;
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	a2 01       	movw	r20, r4
 1a0:	91 01       	movw	r18, r2
 1a2:	0e 94 48 04 	call	0x890	; 0x890 <__udivmodsi4>
 1a6:	19 01       	movw	r2, r18
 1a8:	2a 01       	movw	r4, r20
 1aa:	0f 2e       	mov	r0, r31
 1ac:	f0 e6       	ldi	r31, 0x60	; 96
 1ae:	af 2e       	mov	r10, r31
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	bf 2e       	mov	r11, r31
 1b4:	f0 2d       	mov	r31, r0
inline void SetAllCS_Low();
inline void SetAllCS_High();
void CalcPhaseVal(uint32_t freq, uint32_t dist);

//funkcja oblicza opóźnienia fazowe dla każdego generatora
void CalcPhaseVal(uint32_t freq, uint32_t dist)
 1b6:	ce 01       	movw	r24, r28
 1b8:	8f 57       	subi	r24, 0x7F	; 127
 1ba:	9f 4f       	sbci	r25, 0xFF	; 255
 1bc:	cf 57       	subi	r28, 0x7F	; 127
 1be:	df 4f       	sbci	r29, 0xFF	; 255
 1c0:	99 83       	std	Y+1, r25	; 0x01
 1c2:	88 83       	st	Y, r24
 1c4:	c1 58       	subi	r28, 0x81	; 129
 1c6:	d0 40       	sbci	r29, 0x00	; 0
        distRealTab[i]=sqrt(pow(distxTab[i],2)+pow(dist,2));
    }
    uint32_t delayTab[TABSIZE];
    uint32_t delayzero=distRealTab[7]*speedSound;
    for (int i = 0; i<TABSIZE; i++){
        delayTab[i]=(distRealTab[i]*speedSound)-delayzero;
 1c8:	f6 01       	movw	r30, r12
 1ca:	61 91       	ld	r22, Z+
 1cc:	71 91       	ld	r23, Z+
 1ce:	81 91       	ld	r24, Z+
 1d0:	91 91       	ld	r25, Z+
 1d2:	6f 01       	movw	r12, r30
 1d4:	27 e5       	ldi	r18, 0x57	; 87
 1d6:	31 e0       	ldi	r19, 0x01	; 1
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	0e 94 29 04 	call	0x852	; 0x852 <__mulsi3>
 1e0:	66 19       	sub	r22, r6
 1e2:	77 09       	sbc	r23, r7
 1e4:	88 09       	sbc	r24, r8
 1e6:	99 09       	sbc	r25, r9
        phaseArray[i] = (1 - ((delayTab[i]/(1/freq))-floor((delayTab[i]/(1/freq)))))*2*3.14159265358979;
 1e8:	a2 01       	movw	r20, r4
 1ea:	91 01       	movw	r18, r2
 1ec:	0e 94 48 04 	call	0x890	; 0x890 <__udivmodsi4>
 1f0:	ca 01       	movw	r24, r20
 1f2:	b9 01       	movw	r22, r18
 1f4:	0e 94 9c 02 	call	0x538	; 0x538 <__floatunsisf>
 1f8:	7b 01       	movw	r14, r22
 1fa:	8c 01       	movw	r16, r24
 1fc:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <floor>
 200:	9b 01       	movw	r18, r22
 202:	ac 01       	movw	r20, r24
 204:	c8 01       	movw	r24, r16
 206:	b7 01       	movw	r22, r14
 208:	0e 94 0b 02 	call	0x416	; 0x416 <__subsf3>
 20c:	9b 01       	movw	r18, r22
 20e:	ac 01       	movw	r20, r24
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	9f e3       	ldi	r25, 0x3F	; 63
 218:	0e 94 0b 02 	call	0x416	; 0x416 <__subsf3>
 21c:	9b 01       	movw	r18, r22
 21e:	ac 01       	movw	r20, r24
 220:	0e 94 0c 02 	call	0x418	; 0x418 <__addsf3>
 224:	2b ed       	ldi	r18, 0xDB	; 219
 226:	3f e0       	ldi	r19, 0x0F	; 15
 228:	49 e4       	ldi	r20, 0x49	; 73
 22a:	50 e4       	ldi	r21, 0x40	; 64
 22c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__mulsf3>
 230:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fixunssfsi>
 234:	f5 01       	movw	r30, r10
 236:	61 93       	st	Z+, r22
 238:	71 93       	st	Z+, r23
 23a:	81 93       	st	Z+, r24
 23c:	91 93       	st	Z+, r25
 23e:	5f 01       	movw	r10, r30
    for (int i = 0; i<TABSIZE; i++){
        distRealTab[i]=sqrt(pow(distxTab[i],2)+pow(dist,2));
    }
    uint32_t delayTab[TABSIZE];
    uint32_t delayzero=distRealTab[7]*speedSound;
    for (int i = 0; i<TABSIZE; i++){
 240:	cf 57       	subi	r28, 0x7F	; 127
 242:	df 4f       	sbci	r29, 0xFF	; 255
 244:	88 81       	ld	r24, Y
 246:	99 81       	ldd	r25, Y+1	; 0x01
 248:	c1 58       	subi	r28, 0x81	; 129
 24a:	d0 40       	sbci	r29, 0x00	; 0
 24c:	c8 16       	cp	r12, r24
 24e:	d9 06       	cpc	r13, r25
 250:	09 f0       	breq	.+2      	; 0x254 <_Z12CalcPhaseValmm+0x1d8>
 252:	ba cf       	rjmp	.-140    	; 0x1c8 <_Z12CalcPhaseValmm+0x14c>
        delayTab[i]=(distRealTab[i]*speedSound)-delayzero;
        phaseArray[i] = (1 - ((delayTab[i]/(1/freq))-floor((delayTab[i]/(1/freq)))))*2*3.14159265358979;
    }
}
 254:	ce 57       	subi	r28, 0x7E	; 126
 256:	df 4f       	sbci	r29, 0xFF	; 255
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	f8 94       	cli
 25c:	de bf       	out	0x3e, r29	; 62
 25e:	0f be       	out	0x3f, r0	; 63
 260:	cd bf       	out	0x3d, r28	; 61
 262:	cf 91       	pop	r28
 264:	df 91       	pop	r29
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	df 90       	pop	r13
 270:	cf 90       	pop	r12
 272:	bf 90       	pop	r11
 274:	af 90       	pop	r10
 276:	9f 90       	pop	r9
 278:	8f 90       	pop	r8
 27a:	7f 90       	pop	r7
 27c:	6f 90       	pop	r6
 27e:	5f 90       	pop	r5
 280:	4f 90       	pop	r4
 282:	3f 90       	pop	r3
 284:	2f 90       	pop	r2
 286:	08 95       	ret

00000288 <_Z8CalcFreqm>:
	float freqRes = 0x10000000;
	float stepSize;
	stepSize = freqRes/freqRef;
	
	uint32_t freqWord;
	freqWord = stepSize*freq;
 288:	0e 94 9c 02 	call	0x538	; 0x538 <__floatunsisf>
 28c:	2d ea       	ldi	r18, 0xAD	; 173
 28e:	3e e5       	ldi	r19, 0x5E	; 94
 290:	44 ed       	ldi	r20, 0xD4	; 212
 292:	54 e4       	ldi	r21, 0x44	; 68
 294:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__mulsf3>
 298:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fixunssfsi>
	return freqWord;
}
 29c:	08 95       	ret

0000029e <_Z9CalcPhasem>:
{
	//2π/4096 × PHASEREG
	float phaseRes; 
	phaseRes = 4096/(2*3.14159265358979);
	uint16_t phaseWord;
	phaseWord = phase*phaseRes;
 29e:	0e 94 9c 02 	call	0x538	; 0x538 <__floatunsisf>
 2a2:	23 e8       	ldi	r18, 0x83	; 131
 2a4:	39 ef       	ldi	r19, 0xF9	; 249
 2a6:	42 e2       	ldi	r20, 0x22	; 34
 2a8:	54 e4       	ldi	r21, 0x44	; 68
 2aa:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__mulsf3>
 2ae:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fixunssfsi>
	return phaseWord;
}
 2b2:	86 2f       	mov	r24, r22
 2b4:	97 2f       	mov	r25, r23
 2b6:	08 95       	ret

000002b8 <_Z9SPIconfigv>:

//Konfiguracja pinów i ich rejestrów do SPI
void SPIconfig() 
{
	SCK_DDR|=1<<3; // SET_OUTPUT(SCK_DDR, SCK);
 2b8:	bb 9a       	sbi	0x17, 3	; 23
	SDATA_DDR|=1<<2; // SET_OUTPUT(SDATA_DDR,SDATA);
 2ba:	ba 9a       	sbi	0x17, 2	; 23
	//Rejestr DDR portu A zapełniony 1 - piny CSel0-7
	DDRA = 0b11111111;
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	8a bb       	out	0x1a, r24	; 26
	//Rejestr DDR portu C zapełniony 1 - piny CSel8-15
	DDRC = 0b11111111;
 2c0:	84 bb       	out	0x14, r24	; 20
	SET_HIGH(SCK);
 2c2:	c3 9a       	sbi	0x18, 3	; 24
	SET_HIGH(SDATA);
 2c4:	c2 9a       	sbi	0x18, 2	; 24
	//Stan wysoki wszystkich FSYNC 
	PORTA = 0b11111111;
 2c6:	8b bb       	out	0x1b, r24	; 27
	PORTC = 0b11111111;
 2c8:	85 bb       	out	0x15, r24	; 21
}
 2ca:	08 95       	ret

000002cc <_Z10SPIrefreshv>:

//Ustanowienie domyślnych wartości na portach SPI
void SPIrefresh()
{
	//Stan wysoki wszystkich FSYNC 
	PORTA = 0b11111111;
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	8b bb       	out	0x1b, r24	; 27
	PORTC = 0b11111111;
 2d0:	85 bb       	out	0x15, r24	; 21
	SET_LOW(SDATA);
 2d2:	88 b3       	in	r24, 0x18	; 24
 2d4:	18 ba       	out	0x18, r1	; 24
	SET_HIGH(SCK);
 2d6:	c3 9a       	sbi	0x18, 3	; 24
}
 2d8:	08 95       	ret

000002da <main>:
}



int main(void)
{ 
 2da:	0f 93       	push	r16
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
	uint32_t freq = 5000; // częstotliwość generowanych sygnałów w Hz
	uint32_t dist = 2; // odległość punktu wzmocnienia sygnału od środka wektora głośników w m
	
	//kalkulowanie częstotliwości
	uint32_t freqWord = CalcFreq(freq);
 2e2:	68 e8       	ldi	r22, 0x88	; 136
 2e4:	73 e1       	ldi	r23, 0x13	; 19
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 44 01 	call	0x288	; 0x288 <_Z8CalcFreqm>
	//wielkosc przesylanych danych do rejestru częstotliwości to 2 x 14 bit
	uint16_t freqWordMSB;
	uint16_t freqWordLSB;
	freqWordMSB = (int)((freqWord & 0xFFFC000)>>14);
 2ee:	9b 01       	movw	r18, r22
 2f0:	ac 01       	movw	r20, r24
 2f2:	20 70       	andi	r18, 0x00	; 0
 2f4:	30 7c       	andi	r19, 0xC0	; 192
 2f6:	5f 70       	andi	r21, 0x0F	; 15
 2f8:	01 2e       	mov	r0, r17
 2fa:	1e e0       	ldi	r17, 0x0E	; 14
 2fc:	56 95       	lsr	r21
 2fe:	47 95       	ror	r20
 300:	37 95       	ror	r19
 302:	27 95       	ror	r18
 304:	1a 95       	dec	r17
 306:	d1 f7       	brne	.-12     	; 0x2fc <main+0x22>
 308:	10 2d       	mov	r17, r0
	freqWordLSB = (int)(freqWord & 0x3FFF);
 30a:	7f 73       	andi	r23, 0x3F	; 63
	//bity D15 i D14 - 01 wybierają rejestr FREQ0
	//freqWordLSB |= 0x4000;
	//freqWordMSB |= 0x4000; 
	freqWordLSB |= 0x4FFF;
 30c:	eb 01       	movw	r28, r22
 30e:	cf 6f       	ori	r28, 0xFF	; 255
 310:	df 64       	ori	r29, 0x4F	; 79
	freqWordMSB |= 0x4FFF;
 312:	89 01       	movw	r16, r18
 314:	0f 6f       	ori	r16, 0xFF	; 255
 316:	1f 64       	ori	r17, 0x4F	; 79
	
	//kalkulowanie fazy
	//wielkość przesyłanych danych do rejestru fazy to 12 bit 
	CalcPhaseVal(freq, dist);
 318:	68 e8       	ldi	r22, 0x88	; 136
 31a:	73 e1       	ldi	r23, 0x13	; 19
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	22 e0       	ldi	r18, 0x02	; 2
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	40 e0       	ldi	r20, 0x00	; 0
 326:	50 e0       	ldi	r21, 0x00	; 0
 328:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z12CalcPhaseValmm>
	// RESET=0, bity D11 i  D10 = 00 - rejsestry FREQ0 i PHASE0
	uint16_t resetWordSin = 0x2000; // wyjście to sin
	uint16_t resetWordSqr = 0x2020; // wyjście to prostokąt
	uint16_t resetWordTri = 0x2002; // wyjście to trójkąt
	
	SPIconfig();
 32c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_Z9SPIconfigv>
	
	//Podanie do wszystkich generatorów informacji o częstotliwości i RESET = 1
	//SetAllCS_Low();
	SET_LOW(CSEL0);	
 330:	8b b3       	in	r24, 0x1b	; 27
 332:	1b ba       	out	0x1b, r1	; 27
 334:	20 e1       	ldi	r18, 0x10	; 16
 336:	30 e0       	ldi	r19, 0x00	; 0
}

//Funkcja software'owo realizuje komunikacje SPI - wysyła jeden wyraz
inline void SPIsend(uint16_t data) 
{
	for(uint16_t mask= 0x8000; mask; mask>>=1) 
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e8       	ldi	r25, 0x80	; 128
	{
		SET_HIGH(SCK);
 33c:	c3 9a       	sbi	0x18, 3	; 24
		if(data & mask) SET_HIGH(SDATA);
 33e:	ac 01       	movw	r20, r24
 340:	40 70       	andi	r20, 0x00	; 0
 342:	51 72       	andi	r21, 0x21	; 33
 344:	41 15       	cp	r20, r1
 346:	51 05       	cpc	r21, r1
 348:	11 f0       	breq	.+4      	; 0x34e <main+0x74>
 34a:	c2 9a       	sbi	0x18, 2	; 24
 34c:	02 c0       	rjmp	.+4      	; 0x352 <main+0x78>
		else SET_LOW(SDATA);
 34e:	48 b3       	in	r20, 0x18	; 24
 350:	18 ba       	out	0x18, r1	; 24
		SET_LOW(SCK);
 352:	48 b3       	in	r20, 0x18	; 24
 354:	18 ba       	out	0x18, r1	; 24
}

//Funkcja software'owo realizuje komunikacje SPI - wysyła jeden wyraz
inline void SPIsend(uint16_t data) 
{
	for(uint16_t mask= 0x8000; mask; mask>>=1) 
 356:	96 95       	lsr	r25
 358:	87 95       	ror	r24
 35a:	21 50       	subi	r18, 0x01	; 1
 35c:	30 40       	sbci	r19, 0x00	; 0
 35e:	71 f7       	brne	.-36     	; 0x33c <main+0x62>
	
	//Podanie do wszystkich generatorów informacji o częstotliwości i RESET = 1
	//SetAllCS_Low();
	SET_LOW(CSEL0);	
	SPIsend(initWord); 
	SET_HIGH(CSEL0);
 360:	d8 9a       	sbi	0x1b, 0	; 27
	//SetAllCS_High();
	SPIrefresh();
 362:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z10SPIrefreshv>
}

//Stan niski wszystkich FSYNC - dane odbierają wszystkie generatory
inline void SetAllCS_Low()
{
	PORTA = 0b00000000;
 366:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0b00000000;
 368:	15 ba       	out	0x15, r1	; 21
 36a:	20 e1       	ldi	r18, 0x10	; 16
 36c:	30 e0       	ldi	r19, 0x00	; 0
}

//Funkcja software'owo realizuje komunikacje SPI - wysyła jeden wyraz
inline void SPIsend(uint16_t data) 
{
	for(uint16_t mask= 0x8000; mask; mask>>=1) 
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e8       	ldi	r25, 0x80	; 128
	{
		SET_HIGH(SCK);
 372:	c3 9a       	sbi	0x18, 3	; 24
		if(data & mask) SET_HIGH(SDATA);
 374:	ac 01       	movw	r20, r24
 376:	4c 23       	and	r20, r28
 378:	5d 23       	and	r21, r29
 37a:	41 15       	cp	r20, r1
 37c:	51 05       	cpc	r21, r1
 37e:	11 f0       	breq	.+4      	; 0x384 <main+0xaa>
 380:	c2 9a       	sbi	0x18, 2	; 24
 382:	02 c0       	rjmp	.+4      	; 0x388 <main+0xae>
		else SET_LOW(SDATA);
 384:	48 b3       	in	r20, 0x18	; 24
 386:	18 ba       	out	0x18, r1	; 24
		SET_LOW(SCK);
 388:	48 b3       	in	r20, 0x18	; 24
 38a:	18 ba       	out	0x18, r1	; 24
}

//Funkcja software'owo realizuje komunikacje SPI - wysyła jeden wyraz
inline void SPIsend(uint16_t data) 
{
	for(uint16_t mask= 0x8000; mask; mask>>=1) 
 38c:	96 95       	lsr	r25
 38e:	87 95       	ror	r24
 390:	21 50       	subi	r18, 0x01	; 1
 392:	30 40       	sbci	r19, 0x00	; 0
 394:	71 f7       	brne	.-36     	; 0x372 <main+0x98>
}

//Stan wysoki wszystkich FSYNC 
inline void SetAllCS_High()
{
	PORTA = 0b11111111;
 396:	8f ef       	ldi	r24, 0xFF	; 255
 398:	8b bb       	out	0x1b, r24	; 27
	PORTC = 0b11111111;
 39a:	85 bb       	out	0x15, r24	; 21
	//SetAllCS_High();
	SPIrefresh();
	SetAllCS_Low();	
	SPIsend(freqWordLSB);
	SetAllCS_High();
	SPIrefresh();
 39c:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z10SPIrefreshv>
}

//Stan niski wszystkich FSYNC - dane odbierają wszystkie generatory
inline void SetAllCS_Low()
{
	PORTA = 0b00000000;
 3a0:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0b00000000;
 3a2:	15 ba       	out	0x15, r1	; 21
 3a4:	20 e1       	ldi	r18, 0x10	; 16
 3a6:	30 e0       	ldi	r19, 0x00	; 0
}

//Funkcja software'owo realizuje komunikacje SPI - wysyła jeden wyraz
inline void SPIsend(uint16_t data) 
{
	for(uint16_t mask= 0x8000; mask; mask>>=1) 
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e8       	ldi	r25, 0x80	; 128
	{
		SET_HIGH(SCK);
 3ac:	c3 9a       	sbi	0x18, 3	; 24
		if(data & mask) SET_HIGH(SDATA);
 3ae:	ac 01       	movw	r20, r24
 3b0:	40 23       	and	r20, r16
 3b2:	51 23       	and	r21, r17
 3b4:	41 15       	cp	r20, r1
 3b6:	51 05       	cpc	r21, r1
 3b8:	11 f0       	breq	.+4      	; 0x3be <main+0xe4>
 3ba:	c2 9a       	sbi	0x18, 2	; 24
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <main+0xe8>
		else SET_LOW(SDATA);
 3be:	48 b3       	in	r20, 0x18	; 24
 3c0:	18 ba       	out	0x18, r1	; 24
		SET_LOW(SCK);
 3c2:	48 b3       	in	r20, 0x18	; 24
 3c4:	18 ba       	out	0x18, r1	; 24
}

//Funkcja software'owo realizuje komunikacje SPI - wysyła jeden wyraz
inline void SPIsend(uint16_t data) 
{
	for(uint16_t mask= 0x8000; mask; mask>>=1) 
 3c6:	96 95       	lsr	r25
 3c8:	87 95       	ror	r24
 3ca:	21 50       	subi	r18, 0x01	; 1
 3cc:	30 40       	sbci	r19, 0x00	; 0
 3ce:	71 f7       	brne	.-36     	; 0x3ac <main+0xd2>
}

//Stan wysoki wszystkich FSYNC 
inline void SetAllCS_High()
{
	PORTA = 0b11111111;
 3d0:	8f ef       	ldi	r24, 0xFF	; 255
 3d2:	8b bb       	out	0x1b, r24	; 27
	PORTC = 0b11111111;
 3d4:	85 bb       	out	0x15, r24	; 21
	SetAllCS_High();
	SPIrefresh();
	SetAllCS_Low();	
	SPIsend(freqWordMSB);
	SetAllCS_High();
	SPIrefresh();
 3d6:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z10SPIrefreshv>
	SPIrefresh();
	//podanie do Generatora 15 informacji o fazie
	SET_LOW(CSEL15);
	SPIsend(phaseWordArray[15]);
	SET_HIGH(CSEL15);	*/
	SPIrefresh();
 3da:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z10SPIrefreshv>
}

//Stan niski wszystkich FSYNC - dane odbierają wszystkie generatory
inline void SetAllCS_Low()
{
	PORTA = 0b00000000;
 3de:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0b00000000;
 3e0:	15 ba       	out	0x15, r1	; 21
 3e2:	20 e1       	ldi	r18, 0x10	; 16
 3e4:	30 e0       	ldi	r19, 0x00	; 0
}

//Funkcja software'owo realizuje komunikacje SPI - wysyła jeden wyraz
inline void SPIsend(uint16_t data) 
{
	for(uint16_t mask= 0x8000; mask; mask>>=1) 
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	90 e8       	ldi	r25, 0x80	; 128
	{
		SET_HIGH(SCK);
 3ea:	c3 9a       	sbi	0x18, 3	; 24
		if(data & mask) SET_HIGH(SDATA);
 3ec:	95 ff       	sbrs	r25, 5
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <main+0x11a>
 3f0:	c2 9a       	sbi	0x18, 2	; 24
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <main+0x11e>
		else SET_LOW(SDATA);
 3f4:	48 b3       	in	r20, 0x18	; 24
 3f6:	18 ba       	out	0x18, r1	; 24
		SET_LOW(SCK);
 3f8:	48 b3       	in	r20, 0x18	; 24
 3fa:	18 ba       	out	0x18, r1	; 24
}

//Funkcja software'owo realizuje komunikacje SPI - wysyła jeden wyraz
inline void SPIsend(uint16_t data) 
{
	for(uint16_t mask= 0x8000; mask; mask>>=1) 
 3fc:	96 95       	lsr	r25
 3fe:	87 95       	ror	r24
 400:	21 50       	subi	r18, 0x01	; 1
 402:	30 40       	sbci	r19, 0x00	; 0
 404:	91 f7       	brne	.-28     	; 0x3ea <main+0x110>
}

//Stan wysoki wszystkich FSYNC 
inline void SetAllCS_High()
{
	PORTA = 0b11111111;
 406:	8f ef       	ldi	r24, 0xFF	; 255
 408:	8b bb       	out	0x1b, r24	; 27
	PORTC = 0b11111111;
 40a:	85 bb       	out	0x15, r24	; 21
	SPIsend(resetWordSin); 
	SetAllCS_High();
	
	//Po podaniu danych do generatorów uruchamiany jest generator CLK
	//CLK generowane tą metodą ma częstotliwość 158 kHz
	CLK_DDR|=1; // SET_OUTPUT(CLK_DDR, CLK);
 40c:	b8 9a       	sbi	0x17, 0	; 23
	while(1)
    {
		SET_HIGH(CLK);
 40e:	c0 9a       	sbi	0x18, 0	; 24
		SET_LOW(CLK);	
 410:	88 b3       	in	r24, 0x18	; 24
 412:	18 ba       	out	0x18, r1	; 24
 414:	fc cf       	rjmp	.-8      	; 0x40e <main+0x134>

00000416 <__subsf3>:
 416:	50 58       	subi	r21, 0x80	; 128

00000418 <__addsf3>:
 418:	bb 27       	eor	r27, r27
 41a:	aa 27       	eor	r26, r26
 41c:	0e d0       	rcall	.+28     	; 0x43a <__addsf3x>
 41e:	1c c1       	rjmp	.+568    	; 0x658 <__fp_round>
 420:	0d d1       	rcall	.+538    	; 0x63c <__fp_pscA>
 422:	30 f0       	brcs	.+12     	; 0x430 <__addsf3+0x18>
 424:	12 d1       	rcall	.+548    	; 0x64a <__fp_pscB>
 426:	20 f0       	brcs	.+8      	; 0x430 <__addsf3+0x18>
 428:	31 f4       	brne	.+12     	; 0x436 <__addsf3+0x1e>
 42a:	9f 3f       	cpi	r25, 0xFF	; 255
 42c:	11 f4       	brne	.+4      	; 0x432 <__addsf3+0x1a>
 42e:	1e f4       	brtc	.+6      	; 0x436 <__addsf3+0x1e>
 430:	02 c1       	rjmp	.+516    	; 0x636 <__fp_nan>
 432:	0e f4       	brtc	.+2      	; 0x436 <__addsf3+0x1e>
 434:	e0 95       	com	r30
 436:	e7 fb       	bst	r30, 7
 438:	cf c0       	rjmp	.+414    	; 0x5d8 <__fp_inf>

0000043a <__addsf3x>:
 43a:	e9 2f       	mov	r30, r25
 43c:	1e d1       	rcall	.+572    	; 0x67a <__fp_split3>
 43e:	80 f3       	brcs	.-32     	; 0x420 <__addsf3+0x8>
 440:	ba 17       	cp	r27, r26
 442:	62 07       	cpc	r22, r18
 444:	73 07       	cpc	r23, r19
 446:	84 07       	cpc	r24, r20
 448:	95 07       	cpc	r25, r21
 44a:	18 f0       	brcs	.+6      	; 0x452 <__addsf3x+0x18>
 44c:	71 f4       	brne	.+28     	; 0x46a <__addsf3x+0x30>
 44e:	9e f5       	brtc	.+102    	; 0x4b6 <__addsf3x+0x7c>
 450:	4d c1       	rjmp	.+666    	; 0x6ec <__fp_zero>
 452:	0e f4       	brtc	.+2      	; 0x456 <__addsf3x+0x1c>
 454:	e0 95       	com	r30
 456:	0b 2e       	mov	r0, r27
 458:	ba 2f       	mov	r27, r26
 45a:	a0 2d       	mov	r26, r0
 45c:	0b 01       	movw	r0, r22
 45e:	b9 01       	movw	r22, r18
 460:	90 01       	movw	r18, r0
 462:	0c 01       	movw	r0, r24
 464:	ca 01       	movw	r24, r20
 466:	a0 01       	movw	r20, r0
 468:	11 24       	eor	r1, r1
 46a:	ff 27       	eor	r31, r31
 46c:	59 1b       	sub	r21, r25
 46e:	99 f0       	breq	.+38     	; 0x496 <__addsf3x+0x5c>
 470:	59 3f       	cpi	r21, 0xF9	; 249
 472:	50 f4       	brcc	.+20     	; 0x488 <__addsf3x+0x4e>
 474:	50 3e       	cpi	r21, 0xE0	; 224
 476:	68 f1       	brcs	.+90     	; 0x4d2 <__addsf3x+0x98>
 478:	1a 16       	cp	r1, r26
 47a:	f0 40       	sbci	r31, 0x00	; 0
 47c:	a2 2f       	mov	r26, r18
 47e:	23 2f       	mov	r18, r19
 480:	34 2f       	mov	r19, r20
 482:	44 27       	eor	r20, r20
 484:	58 5f       	subi	r21, 0xF8	; 248
 486:	f3 cf       	rjmp	.-26     	; 0x46e <__addsf3x+0x34>
 488:	46 95       	lsr	r20
 48a:	37 95       	ror	r19
 48c:	27 95       	ror	r18
 48e:	a7 95       	ror	r26
 490:	f0 40       	sbci	r31, 0x00	; 0
 492:	53 95       	inc	r21
 494:	c9 f7       	brne	.-14     	; 0x488 <__addsf3x+0x4e>
 496:	7e f4       	brtc	.+30     	; 0x4b6 <__addsf3x+0x7c>
 498:	1f 16       	cp	r1, r31
 49a:	ba 0b       	sbc	r27, r26
 49c:	62 0b       	sbc	r22, r18
 49e:	73 0b       	sbc	r23, r19
 4a0:	84 0b       	sbc	r24, r20
 4a2:	ba f0       	brmi	.+46     	; 0x4d2 <__addsf3x+0x98>
 4a4:	91 50       	subi	r25, 0x01	; 1
 4a6:	a1 f0       	breq	.+40     	; 0x4d0 <__addsf3x+0x96>
 4a8:	ff 0f       	add	r31, r31
 4aa:	bb 1f       	adc	r27, r27
 4ac:	66 1f       	adc	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	88 1f       	adc	r24, r24
 4b2:	c2 f7       	brpl	.-16     	; 0x4a4 <__addsf3x+0x6a>
 4b4:	0e c0       	rjmp	.+28     	; 0x4d2 <__addsf3x+0x98>
 4b6:	ba 0f       	add	r27, r26
 4b8:	62 1f       	adc	r22, r18
 4ba:	73 1f       	adc	r23, r19
 4bc:	84 1f       	adc	r24, r20
 4be:	48 f4       	brcc	.+18     	; 0x4d2 <__addsf3x+0x98>
 4c0:	87 95       	ror	r24
 4c2:	77 95       	ror	r23
 4c4:	67 95       	ror	r22
 4c6:	b7 95       	ror	r27
 4c8:	f7 95       	ror	r31
 4ca:	9e 3f       	cpi	r25, 0xFE	; 254
 4cc:	08 f0       	brcs	.+2      	; 0x4d0 <__addsf3x+0x96>
 4ce:	b3 cf       	rjmp	.-154    	; 0x436 <__addsf3+0x1e>
 4d0:	93 95       	inc	r25
 4d2:	88 0f       	add	r24, r24
 4d4:	08 f0       	brcs	.+2      	; 0x4d8 <__addsf3x+0x9e>
 4d6:	99 27       	eor	r25, r25
 4d8:	ee 0f       	add	r30, r30
 4da:	97 95       	ror	r25
 4dc:	87 95       	ror	r24
 4de:	08 95       	ret

000004e0 <__fixunssfsi>:
 4e0:	d4 d0       	rcall	.+424    	; 0x68a <__fp_splitA>
 4e2:	88 f0       	brcs	.+34     	; 0x506 <__fixunssfsi+0x26>
 4e4:	9f 57       	subi	r25, 0x7F	; 127
 4e6:	90 f0       	brcs	.+36     	; 0x50c <__fixunssfsi+0x2c>
 4e8:	b9 2f       	mov	r27, r25
 4ea:	99 27       	eor	r25, r25
 4ec:	b7 51       	subi	r27, 0x17	; 23
 4ee:	a0 f0       	brcs	.+40     	; 0x518 <__fixunssfsi+0x38>
 4f0:	d1 f0       	breq	.+52     	; 0x526 <__fixunssfsi+0x46>
 4f2:	66 0f       	add	r22, r22
 4f4:	77 1f       	adc	r23, r23
 4f6:	88 1f       	adc	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	1a f0       	brmi	.+6      	; 0x502 <__fixunssfsi+0x22>
 4fc:	ba 95       	dec	r27
 4fe:	c9 f7       	brne	.-14     	; 0x4f2 <__fixunssfsi+0x12>
 500:	12 c0       	rjmp	.+36     	; 0x526 <__fixunssfsi+0x46>
 502:	b1 30       	cpi	r27, 0x01	; 1
 504:	81 f0       	breq	.+32     	; 0x526 <__fixunssfsi+0x46>
 506:	f2 d0       	rcall	.+484    	; 0x6ec <__fp_zero>
 508:	b1 e0       	ldi	r27, 0x01	; 1
 50a:	08 95       	ret
 50c:	ef c0       	rjmp	.+478    	; 0x6ec <__fp_zero>
 50e:	67 2f       	mov	r22, r23
 510:	78 2f       	mov	r23, r24
 512:	88 27       	eor	r24, r24
 514:	b8 5f       	subi	r27, 0xF8	; 248
 516:	39 f0       	breq	.+14     	; 0x526 <__fixunssfsi+0x46>
 518:	b9 3f       	cpi	r27, 0xF9	; 249
 51a:	cc f3       	brlt	.-14     	; 0x50e <__fixunssfsi+0x2e>
 51c:	86 95       	lsr	r24
 51e:	77 95       	ror	r23
 520:	67 95       	ror	r22
 522:	b3 95       	inc	r27
 524:	d9 f7       	brne	.-10     	; 0x51c <__fixunssfsi+0x3c>
 526:	3e f4       	brtc	.+14     	; 0x536 <__fixunssfsi+0x56>
 528:	90 95       	com	r25
 52a:	80 95       	com	r24
 52c:	70 95       	com	r23
 52e:	61 95       	neg	r22
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	8f 4f       	sbci	r24, 0xFF	; 255
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	08 95       	ret

00000538 <__floatunsisf>:
 538:	e8 94       	clt
 53a:	09 c0       	rjmp	.+18     	; 0x54e <__floatsisf+0x12>

0000053c <__floatsisf>:
 53c:	97 fb       	bst	r25, 7
 53e:	3e f4       	brtc	.+14     	; 0x54e <__floatsisf+0x12>
 540:	90 95       	com	r25
 542:	80 95       	com	r24
 544:	70 95       	com	r23
 546:	61 95       	neg	r22
 548:	7f 4f       	sbci	r23, 0xFF	; 255
 54a:	8f 4f       	sbci	r24, 0xFF	; 255
 54c:	9f 4f       	sbci	r25, 0xFF	; 255
 54e:	99 23       	and	r25, r25
 550:	a9 f0       	breq	.+42     	; 0x57c <__floatsisf+0x40>
 552:	f9 2f       	mov	r31, r25
 554:	96 e9       	ldi	r25, 0x96	; 150
 556:	bb 27       	eor	r27, r27
 558:	93 95       	inc	r25
 55a:	f6 95       	lsr	r31
 55c:	87 95       	ror	r24
 55e:	77 95       	ror	r23
 560:	67 95       	ror	r22
 562:	b7 95       	ror	r27
 564:	f1 11       	cpse	r31, r1
 566:	f8 cf       	rjmp	.-16     	; 0x558 <__floatsisf+0x1c>
 568:	fa f4       	brpl	.+62     	; 0x5a8 <__floatsisf+0x6c>
 56a:	bb 0f       	add	r27, r27
 56c:	11 f4       	brne	.+4      	; 0x572 <__floatsisf+0x36>
 56e:	60 ff       	sbrs	r22, 0
 570:	1b c0       	rjmp	.+54     	; 0x5a8 <__floatsisf+0x6c>
 572:	6f 5f       	subi	r22, 0xFF	; 255
 574:	7f 4f       	sbci	r23, 0xFF	; 255
 576:	8f 4f       	sbci	r24, 0xFF	; 255
 578:	9f 4f       	sbci	r25, 0xFF	; 255
 57a:	16 c0       	rjmp	.+44     	; 0x5a8 <__floatsisf+0x6c>
 57c:	88 23       	and	r24, r24
 57e:	11 f0       	breq	.+4      	; 0x584 <__floatsisf+0x48>
 580:	96 e9       	ldi	r25, 0x96	; 150
 582:	11 c0       	rjmp	.+34     	; 0x5a6 <__floatsisf+0x6a>
 584:	77 23       	and	r23, r23
 586:	21 f0       	breq	.+8      	; 0x590 <__floatsisf+0x54>
 588:	9e e8       	ldi	r25, 0x8E	; 142
 58a:	87 2f       	mov	r24, r23
 58c:	76 2f       	mov	r23, r22
 58e:	05 c0       	rjmp	.+10     	; 0x59a <__floatsisf+0x5e>
 590:	66 23       	and	r22, r22
 592:	71 f0       	breq	.+28     	; 0x5b0 <__floatsisf+0x74>
 594:	96 e8       	ldi	r25, 0x86	; 134
 596:	86 2f       	mov	r24, r22
 598:	70 e0       	ldi	r23, 0x00	; 0
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	2a f0       	brmi	.+10     	; 0x5a8 <__floatsisf+0x6c>
 59e:	9a 95       	dec	r25
 5a0:	66 0f       	add	r22, r22
 5a2:	77 1f       	adc	r23, r23
 5a4:	88 1f       	adc	r24, r24
 5a6:	da f7       	brpl	.-10     	; 0x59e <__floatsisf+0x62>
 5a8:	88 0f       	add	r24, r24
 5aa:	96 95       	lsr	r25
 5ac:	87 95       	ror	r24
 5ae:	97 f9       	bld	r25, 7
 5b0:	08 95       	ret

000005b2 <floor>:
 5b2:	85 d0       	rcall	.+266    	; 0x6be <__fp_trunc>
 5b4:	80 f0       	brcs	.+32     	; 0x5d6 <floor+0x24>
 5b6:	9f 37       	cpi	r25, 0x7F	; 127
 5b8:	40 f4       	brcc	.+16     	; 0x5ca <floor+0x18>
 5ba:	91 11       	cpse	r25, r1
 5bc:	0e f0       	brts	.+2      	; 0x5c0 <floor+0xe>
 5be:	97 c0       	rjmp	.+302    	; 0x6ee <__fp_szero>
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	70 e0       	ldi	r23, 0x00	; 0
 5c4:	80 e8       	ldi	r24, 0x80	; 128
 5c6:	9f eb       	ldi	r25, 0xBF	; 191
 5c8:	08 95       	ret
 5ca:	26 f4       	brtc	.+8      	; 0x5d4 <floor+0x22>
 5cc:	1b 16       	cp	r1, r27
 5ce:	61 1d       	adc	r22, r1
 5d0:	71 1d       	adc	r23, r1
 5d2:	81 1d       	adc	r24, r1
 5d4:	07 c0       	rjmp	.+14     	; 0x5e4 <__fp_mintl>
 5d6:	21 c0       	rjmp	.+66     	; 0x61a <__fp_mpack>

000005d8 <__fp_inf>:
 5d8:	97 f9       	bld	r25, 7
 5da:	9f 67       	ori	r25, 0x7F	; 127
 5dc:	80 e8       	ldi	r24, 0x80	; 128
 5de:	70 e0       	ldi	r23, 0x00	; 0
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	08 95       	ret

000005e4 <__fp_mintl>:
 5e4:	88 23       	and	r24, r24
 5e6:	71 f4       	brne	.+28     	; 0x604 <__fp_mintl+0x20>
 5e8:	77 23       	and	r23, r23
 5ea:	21 f0       	breq	.+8      	; 0x5f4 <__fp_mintl+0x10>
 5ec:	98 50       	subi	r25, 0x08	; 8
 5ee:	87 2b       	or	r24, r23
 5f0:	76 2f       	mov	r23, r22
 5f2:	07 c0       	rjmp	.+14     	; 0x602 <__fp_mintl+0x1e>
 5f4:	66 23       	and	r22, r22
 5f6:	11 f4       	brne	.+4      	; 0x5fc <__fp_mintl+0x18>
 5f8:	99 27       	eor	r25, r25
 5fa:	0d c0       	rjmp	.+26     	; 0x616 <__fp_mintl+0x32>
 5fc:	90 51       	subi	r25, 0x10	; 16
 5fe:	86 2b       	or	r24, r22
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	2a f0       	brmi	.+10     	; 0x610 <__fp_mintl+0x2c>
 606:	9a 95       	dec	r25
 608:	66 0f       	add	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	88 1f       	adc	r24, r24
 60e:	da f7       	brpl	.-10     	; 0x606 <__fp_mintl+0x22>
 610:	88 0f       	add	r24, r24
 612:	96 95       	lsr	r25
 614:	87 95       	ror	r24
 616:	97 f9       	bld	r25, 7
 618:	08 95       	ret

0000061a <__fp_mpack>:
 61a:	9f 3f       	cpi	r25, 0xFF	; 255
 61c:	31 f0       	breq	.+12     	; 0x62a <__fp_mpack_finite+0xc>

0000061e <__fp_mpack_finite>:
 61e:	91 50       	subi	r25, 0x01	; 1
 620:	20 f4       	brcc	.+8      	; 0x62a <__fp_mpack_finite+0xc>
 622:	87 95       	ror	r24
 624:	77 95       	ror	r23
 626:	67 95       	ror	r22
 628:	b7 95       	ror	r27
 62a:	88 0f       	add	r24, r24
 62c:	91 1d       	adc	r25, r1
 62e:	96 95       	lsr	r25
 630:	87 95       	ror	r24
 632:	97 f9       	bld	r25, 7
 634:	08 95       	ret

00000636 <__fp_nan>:
 636:	9f ef       	ldi	r25, 0xFF	; 255
 638:	80 ec       	ldi	r24, 0xC0	; 192
 63a:	08 95       	ret

0000063c <__fp_pscA>:
 63c:	00 24       	eor	r0, r0
 63e:	0a 94       	dec	r0
 640:	16 16       	cp	r1, r22
 642:	17 06       	cpc	r1, r23
 644:	18 06       	cpc	r1, r24
 646:	09 06       	cpc	r0, r25
 648:	08 95       	ret

0000064a <__fp_pscB>:
 64a:	00 24       	eor	r0, r0
 64c:	0a 94       	dec	r0
 64e:	12 16       	cp	r1, r18
 650:	13 06       	cpc	r1, r19
 652:	14 06       	cpc	r1, r20
 654:	05 06       	cpc	r0, r21
 656:	08 95       	ret

00000658 <__fp_round>:
 658:	09 2e       	mov	r0, r25
 65a:	03 94       	inc	r0
 65c:	00 0c       	add	r0, r0
 65e:	11 f4       	brne	.+4      	; 0x664 <__fp_round+0xc>
 660:	88 23       	and	r24, r24
 662:	52 f0       	brmi	.+20     	; 0x678 <__fp_round+0x20>
 664:	bb 0f       	add	r27, r27
 666:	40 f4       	brcc	.+16     	; 0x678 <__fp_round+0x20>
 668:	bf 2b       	or	r27, r31
 66a:	11 f4       	brne	.+4      	; 0x670 <__fp_round+0x18>
 66c:	60 ff       	sbrs	r22, 0
 66e:	04 c0       	rjmp	.+8      	; 0x678 <__fp_round+0x20>
 670:	6f 5f       	subi	r22, 0xFF	; 255
 672:	7f 4f       	sbci	r23, 0xFF	; 255
 674:	8f 4f       	sbci	r24, 0xFF	; 255
 676:	9f 4f       	sbci	r25, 0xFF	; 255
 678:	08 95       	ret

0000067a <__fp_split3>:
 67a:	57 fd       	sbrc	r21, 7
 67c:	90 58       	subi	r25, 0x80	; 128
 67e:	44 0f       	add	r20, r20
 680:	55 1f       	adc	r21, r21
 682:	59 f0       	breq	.+22     	; 0x69a <__fp_splitA+0x10>
 684:	5f 3f       	cpi	r21, 0xFF	; 255
 686:	71 f0       	breq	.+28     	; 0x6a4 <__fp_splitA+0x1a>
 688:	47 95       	ror	r20

0000068a <__fp_splitA>:
 68a:	88 0f       	add	r24, r24
 68c:	97 fb       	bst	r25, 7
 68e:	99 1f       	adc	r25, r25
 690:	61 f0       	breq	.+24     	; 0x6aa <__fp_splitA+0x20>
 692:	9f 3f       	cpi	r25, 0xFF	; 255
 694:	79 f0       	breq	.+30     	; 0x6b4 <__fp_splitA+0x2a>
 696:	87 95       	ror	r24
 698:	08 95       	ret
 69a:	12 16       	cp	r1, r18
 69c:	13 06       	cpc	r1, r19
 69e:	14 06       	cpc	r1, r20
 6a0:	55 1f       	adc	r21, r21
 6a2:	f2 cf       	rjmp	.-28     	; 0x688 <__fp_split3+0xe>
 6a4:	46 95       	lsr	r20
 6a6:	f1 df       	rcall	.-30     	; 0x68a <__fp_splitA>
 6a8:	08 c0       	rjmp	.+16     	; 0x6ba <__fp_splitA+0x30>
 6aa:	16 16       	cp	r1, r22
 6ac:	17 06       	cpc	r1, r23
 6ae:	18 06       	cpc	r1, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	f1 cf       	rjmp	.-30     	; 0x696 <__fp_splitA+0xc>
 6b4:	86 95       	lsr	r24
 6b6:	71 05       	cpc	r23, r1
 6b8:	61 05       	cpc	r22, r1
 6ba:	08 94       	sec
 6bc:	08 95       	ret

000006be <__fp_trunc>:
 6be:	e5 df       	rcall	.-54     	; 0x68a <__fp_splitA>
 6c0:	a0 f0       	brcs	.+40     	; 0x6ea <__fp_trunc+0x2c>
 6c2:	be e7       	ldi	r27, 0x7E	; 126
 6c4:	b9 17       	cp	r27, r25
 6c6:	88 f4       	brcc	.+34     	; 0x6ea <__fp_trunc+0x2c>
 6c8:	bb 27       	eor	r27, r27
 6ca:	9f 38       	cpi	r25, 0x8F	; 143
 6cc:	60 f4       	brcc	.+24     	; 0x6e6 <__fp_trunc+0x28>
 6ce:	16 16       	cp	r1, r22
 6d0:	b1 1d       	adc	r27, r1
 6d2:	67 2f       	mov	r22, r23
 6d4:	78 2f       	mov	r23, r24
 6d6:	88 27       	eor	r24, r24
 6d8:	98 5f       	subi	r25, 0xF8	; 248
 6da:	f7 cf       	rjmp	.-18     	; 0x6ca <__fp_trunc+0xc>
 6dc:	86 95       	lsr	r24
 6de:	77 95       	ror	r23
 6e0:	67 95       	ror	r22
 6e2:	b1 1d       	adc	r27, r1
 6e4:	93 95       	inc	r25
 6e6:	96 39       	cpi	r25, 0x96	; 150
 6e8:	c8 f3       	brcs	.-14     	; 0x6dc <__fp_trunc+0x1e>
 6ea:	08 95       	ret

000006ec <__fp_zero>:
 6ec:	e8 94       	clt

000006ee <__fp_szero>:
 6ee:	bb 27       	eor	r27, r27
 6f0:	66 27       	eor	r22, r22
 6f2:	77 27       	eor	r23, r23
 6f4:	cb 01       	movw	r24, r22
 6f6:	97 f9       	bld	r25, 7
 6f8:	08 95       	ret

000006fa <__mulsf3>:
 6fa:	0b d0       	rcall	.+22     	; 0x712 <__mulsf3x>
 6fc:	ad cf       	rjmp	.-166    	; 0x658 <__fp_round>
 6fe:	9e df       	rcall	.-196    	; 0x63c <__fp_pscA>
 700:	28 f0       	brcs	.+10     	; 0x70c <__mulsf3+0x12>
 702:	a3 df       	rcall	.-186    	; 0x64a <__fp_pscB>
 704:	18 f0       	brcs	.+6      	; 0x70c <__mulsf3+0x12>
 706:	95 23       	and	r25, r21
 708:	09 f0       	breq	.+2      	; 0x70c <__mulsf3+0x12>
 70a:	66 cf       	rjmp	.-308    	; 0x5d8 <__fp_inf>
 70c:	94 cf       	rjmp	.-216    	; 0x636 <__fp_nan>
 70e:	11 24       	eor	r1, r1
 710:	ee cf       	rjmp	.-36     	; 0x6ee <__fp_szero>

00000712 <__mulsf3x>:
 712:	b3 df       	rcall	.-154    	; 0x67a <__fp_split3>
 714:	a0 f3       	brcs	.-24     	; 0x6fe <__mulsf3+0x4>

00000716 <__mulsf3_pse>:
 716:	95 9f       	mul	r25, r21
 718:	d1 f3       	breq	.-12     	; 0x70e <__mulsf3+0x14>
 71a:	95 0f       	add	r25, r21
 71c:	50 e0       	ldi	r21, 0x00	; 0
 71e:	55 1f       	adc	r21, r21
 720:	62 9f       	mul	r22, r18
 722:	f0 01       	movw	r30, r0
 724:	72 9f       	mul	r23, r18
 726:	bb 27       	eor	r27, r27
 728:	f0 0d       	add	r31, r0
 72a:	b1 1d       	adc	r27, r1
 72c:	63 9f       	mul	r22, r19
 72e:	aa 27       	eor	r26, r26
 730:	f0 0d       	add	r31, r0
 732:	b1 1d       	adc	r27, r1
 734:	aa 1f       	adc	r26, r26
 736:	64 9f       	mul	r22, r20
 738:	66 27       	eor	r22, r22
 73a:	b0 0d       	add	r27, r0
 73c:	a1 1d       	adc	r26, r1
 73e:	66 1f       	adc	r22, r22
 740:	82 9f       	mul	r24, r18
 742:	22 27       	eor	r18, r18
 744:	b0 0d       	add	r27, r0
 746:	a1 1d       	adc	r26, r1
 748:	62 1f       	adc	r22, r18
 74a:	73 9f       	mul	r23, r19
 74c:	b0 0d       	add	r27, r0
 74e:	a1 1d       	adc	r26, r1
 750:	62 1f       	adc	r22, r18
 752:	83 9f       	mul	r24, r19
 754:	a0 0d       	add	r26, r0
 756:	61 1d       	adc	r22, r1
 758:	22 1f       	adc	r18, r18
 75a:	74 9f       	mul	r23, r20
 75c:	33 27       	eor	r19, r19
 75e:	a0 0d       	add	r26, r0
 760:	61 1d       	adc	r22, r1
 762:	23 1f       	adc	r18, r19
 764:	84 9f       	mul	r24, r20
 766:	60 0d       	add	r22, r0
 768:	21 1d       	adc	r18, r1
 76a:	82 2f       	mov	r24, r18
 76c:	76 2f       	mov	r23, r22
 76e:	6a 2f       	mov	r22, r26
 770:	11 24       	eor	r1, r1
 772:	9f 57       	subi	r25, 0x7F	; 127
 774:	50 40       	sbci	r21, 0x00	; 0
 776:	8a f0       	brmi	.+34     	; 0x79a <__mulsf3_pse+0x84>
 778:	e1 f0       	breq	.+56     	; 0x7b2 <__mulsf3_pse+0x9c>
 77a:	88 23       	and	r24, r24
 77c:	4a f0       	brmi	.+18     	; 0x790 <__mulsf3_pse+0x7a>
 77e:	ee 0f       	add	r30, r30
 780:	ff 1f       	adc	r31, r31
 782:	bb 1f       	adc	r27, r27
 784:	66 1f       	adc	r22, r22
 786:	77 1f       	adc	r23, r23
 788:	88 1f       	adc	r24, r24
 78a:	91 50       	subi	r25, 0x01	; 1
 78c:	50 40       	sbci	r21, 0x00	; 0
 78e:	a9 f7       	brne	.-22     	; 0x77a <__mulsf3_pse+0x64>
 790:	9e 3f       	cpi	r25, 0xFE	; 254
 792:	51 05       	cpc	r21, r1
 794:	70 f0       	brcs	.+28     	; 0x7b2 <__mulsf3_pse+0x9c>
 796:	20 cf       	rjmp	.-448    	; 0x5d8 <__fp_inf>
 798:	aa cf       	rjmp	.-172    	; 0x6ee <__fp_szero>
 79a:	5f 3f       	cpi	r21, 0xFF	; 255
 79c:	ec f3       	brlt	.-6      	; 0x798 <__mulsf3_pse+0x82>
 79e:	98 3e       	cpi	r25, 0xE8	; 232
 7a0:	dc f3       	brlt	.-10     	; 0x798 <__mulsf3_pse+0x82>
 7a2:	86 95       	lsr	r24
 7a4:	77 95       	ror	r23
 7a6:	67 95       	ror	r22
 7a8:	b7 95       	ror	r27
 7aa:	f7 95       	ror	r31
 7ac:	e7 95       	ror	r30
 7ae:	9f 5f       	subi	r25, 0xFF	; 255
 7b0:	c1 f7       	brne	.-16     	; 0x7a2 <__mulsf3_pse+0x8c>
 7b2:	fe 2b       	or	r31, r30
 7b4:	88 0f       	add	r24, r24
 7b6:	91 1d       	adc	r25, r1
 7b8:	96 95       	lsr	r25
 7ba:	87 95       	ror	r24
 7bc:	97 f9       	bld	r25, 7
 7be:	08 95       	ret
 7c0:	11 f4       	brne	.+4      	; 0x7c6 <__mulsf3_pse+0xb0>
 7c2:	0e f4       	brtc	.+2      	; 0x7c6 <__mulsf3_pse+0xb0>
 7c4:	38 cf       	rjmp	.-400    	; 0x636 <__fp_nan>
 7c6:	29 cf       	rjmp	.-430    	; 0x61a <__fp_mpack>

000007c8 <sqrt>:
 7c8:	60 df       	rcall	.-320    	; 0x68a <__fp_splitA>
 7ca:	d0 f3       	brcs	.-12     	; 0x7c0 <__mulsf3_pse+0xaa>
 7cc:	99 23       	and	r25, r25
 7ce:	d9 f3       	breq	.-10     	; 0x7c6 <__mulsf3_pse+0xb0>
 7d0:	ce f3       	brts	.-14     	; 0x7c4 <__mulsf3_pse+0xae>
 7d2:	9f 57       	subi	r25, 0x7F	; 127
 7d4:	55 0b       	sbc	r21, r21
 7d6:	87 ff       	sbrs	r24, 7
 7d8:	35 d0       	rcall	.+106    	; 0x844 <__fp_norm2>
 7da:	00 24       	eor	r0, r0
 7dc:	a0 e6       	ldi	r26, 0x60	; 96
 7de:	40 ea       	ldi	r20, 0xA0	; 160
 7e0:	90 01       	movw	r18, r0
 7e2:	80 58       	subi	r24, 0x80	; 128
 7e4:	56 95       	lsr	r21
 7e6:	97 95       	ror	r25
 7e8:	28 f4       	brcc	.+10     	; 0x7f4 <sqrt+0x2c>
 7ea:	80 5c       	subi	r24, 0xC0	; 192
 7ec:	66 0f       	add	r22, r22
 7ee:	77 1f       	adc	r23, r23
 7f0:	88 1f       	adc	r24, r24
 7f2:	20 f0       	brcs	.+8      	; 0x7fc <sqrt+0x34>
 7f4:	26 17       	cp	r18, r22
 7f6:	37 07       	cpc	r19, r23
 7f8:	48 07       	cpc	r20, r24
 7fa:	30 f4       	brcc	.+12     	; 0x808 <sqrt+0x40>
 7fc:	62 1b       	sub	r22, r18
 7fe:	73 0b       	sbc	r23, r19
 800:	84 0b       	sbc	r24, r20
 802:	20 29       	or	r18, r0
 804:	31 29       	or	r19, r1
 806:	4a 2b       	or	r20, r26
 808:	a6 95       	lsr	r26
 80a:	17 94       	ror	r1
 80c:	07 94       	ror	r0
 80e:	20 25       	eor	r18, r0
 810:	31 25       	eor	r19, r1
 812:	4a 27       	eor	r20, r26
 814:	58 f7       	brcc	.-42     	; 0x7ec <sqrt+0x24>
 816:	66 0f       	add	r22, r22
 818:	77 1f       	adc	r23, r23
 81a:	88 1f       	adc	r24, r24
 81c:	20 f0       	brcs	.+8      	; 0x826 <sqrt+0x5e>
 81e:	26 17       	cp	r18, r22
 820:	37 07       	cpc	r19, r23
 822:	48 07       	cpc	r20, r24
 824:	30 f4       	brcc	.+12     	; 0x832 <sqrt+0x6a>
 826:	62 0b       	sbc	r22, r18
 828:	73 0b       	sbc	r23, r19
 82a:	84 0b       	sbc	r24, r20
 82c:	20 0d       	add	r18, r0
 82e:	31 1d       	adc	r19, r1
 830:	41 1d       	adc	r20, r1
 832:	a0 95       	com	r26
 834:	81 f7       	brne	.-32     	; 0x816 <sqrt+0x4e>
 836:	b9 01       	movw	r22, r18
 838:	84 2f       	mov	r24, r20
 83a:	91 58       	subi	r25, 0x81	; 129
 83c:	88 0f       	add	r24, r24
 83e:	96 95       	lsr	r25
 840:	87 95       	ror	r24
 842:	08 95       	ret

00000844 <__fp_norm2>:
 844:	91 50       	subi	r25, 0x01	; 1
 846:	50 40       	sbci	r21, 0x00	; 0
 848:	66 0f       	add	r22, r22
 84a:	77 1f       	adc	r23, r23
 84c:	88 1f       	adc	r24, r24
 84e:	d2 f7       	brpl	.-12     	; 0x844 <__fp_norm2>
 850:	08 95       	ret

00000852 <__mulsi3>:
 852:	62 9f       	mul	r22, r18
 854:	d0 01       	movw	r26, r0
 856:	73 9f       	mul	r23, r19
 858:	f0 01       	movw	r30, r0
 85a:	82 9f       	mul	r24, r18
 85c:	e0 0d       	add	r30, r0
 85e:	f1 1d       	adc	r31, r1
 860:	64 9f       	mul	r22, r20
 862:	e0 0d       	add	r30, r0
 864:	f1 1d       	adc	r31, r1
 866:	92 9f       	mul	r25, r18
 868:	f0 0d       	add	r31, r0
 86a:	83 9f       	mul	r24, r19
 86c:	f0 0d       	add	r31, r0
 86e:	74 9f       	mul	r23, r20
 870:	f0 0d       	add	r31, r0
 872:	65 9f       	mul	r22, r21
 874:	f0 0d       	add	r31, r0
 876:	99 27       	eor	r25, r25
 878:	72 9f       	mul	r23, r18
 87a:	b0 0d       	add	r27, r0
 87c:	e1 1d       	adc	r30, r1
 87e:	f9 1f       	adc	r31, r25
 880:	63 9f       	mul	r22, r19
 882:	b0 0d       	add	r27, r0
 884:	e1 1d       	adc	r30, r1
 886:	f9 1f       	adc	r31, r25
 888:	bd 01       	movw	r22, r26
 88a:	cf 01       	movw	r24, r30
 88c:	11 24       	eor	r1, r1
 88e:	08 95       	ret

00000890 <__udivmodsi4>:
 890:	a1 e2       	ldi	r26, 0x21	; 33
 892:	1a 2e       	mov	r1, r26
 894:	aa 1b       	sub	r26, r26
 896:	bb 1b       	sub	r27, r27
 898:	fd 01       	movw	r30, r26
 89a:	0d c0       	rjmp	.+26     	; 0x8b6 <__udivmodsi4_ep>

0000089c <__udivmodsi4_loop>:
 89c:	aa 1f       	adc	r26, r26
 89e:	bb 1f       	adc	r27, r27
 8a0:	ee 1f       	adc	r30, r30
 8a2:	ff 1f       	adc	r31, r31
 8a4:	a2 17       	cp	r26, r18
 8a6:	b3 07       	cpc	r27, r19
 8a8:	e4 07       	cpc	r30, r20
 8aa:	f5 07       	cpc	r31, r21
 8ac:	20 f0       	brcs	.+8      	; 0x8b6 <__udivmodsi4_ep>
 8ae:	a2 1b       	sub	r26, r18
 8b0:	b3 0b       	sbc	r27, r19
 8b2:	e4 0b       	sbc	r30, r20
 8b4:	f5 0b       	sbc	r31, r21

000008b6 <__udivmodsi4_ep>:
 8b6:	66 1f       	adc	r22, r22
 8b8:	77 1f       	adc	r23, r23
 8ba:	88 1f       	adc	r24, r24
 8bc:	99 1f       	adc	r25, r25
 8be:	1a 94       	dec	r1
 8c0:	69 f7       	brne	.-38     	; 0x89c <__udivmodsi4_loop>
 8c2:	60 95       	com	r22
 8c4:	70 95       	com	r23
 8c6:	80 95       	com	r24
 8c8:	90 95       	com	r25
 8ca:	9b 01       	movw	r18, r22
 8cc:	ac 01       	movw	r20, r24
 8ce:	bd 01       	movw	r22, r26
 8d0:	cf 01       	movw	r24, r30
 8d2:	08 95       	ret

000008d4 <_exit>:
 8d4:	f8 94       	cli

000008d6 <__stop_program>:
 8d6:	ff cf       	rjmp	.-2      	; 0x8d6 <__stop_program>
